---
- name: Clone tvesely/TPC-DS
  git:
    repo: "https://github.com/tvesely/TPC-DS"
    dest: "{{ lookup('env','HOME') }}/workspace/TPC-DS"
    remote: origin
    update: false

- name: Build dsdgen CLI tool
  command: "make -j8"
  args:
    chdir: "{{ lookup('env','HOME') }}/workspace/TPC-DS/00_compile_tpcds/tools"
  tags:
      - tpcds-dbgen

- name: Install dsdgen CLI tool in PATH
  copy:
    src: "{{ lookup('env','HOME') }}/workspace/TPC-DS/00_compile_tpcds/tools/dsdgen"
    dest: /usr/local/bin/dsdgen
    mode: 0755
  become: yes
- name: Install dsqgen CLI tool in PATH
  copy:
    src: "{{ lookup('env','HOME') }}/workspace/TPC-DS/00_compile_tpcds/tools/dsqgen"
    dest: /usr/local/bin/dsqgen
    mode: 0755
  become: yes
- name: Install tpcds.idx in PATH
  copy:
    src: "{{ lookup('env','HOME') }}/workspace/TPC-DS/00_compile_tpcds/tools/tpcds.idx"
    dest: /usr/local/bin/tpcds.idx
    mode: 0755
  become: yes

- name: Install dsdgen_generate_data.sh CLI tool in PATH
  copy:
    src: "{{ lookup('env','HOME') }}/workspace/TPC-DS/01_gen_data/generate_data.sh"
    dest: /usr/local/bin/dsdgen_generate_data.sh
    mode: 0755
  become: yes

- name: Generate tcp-ds datagen path names
  set_fact: path_item="{{item}}"
  with_sequence: start=1 end={{ansible_facts["processor_vcpus"]}} format={{datagen_path}}/gen_data_scale_{{datagen_scale}}_%02d_of_{{ansible_facts["processor_vcpus"]}}
  register: path_result

- name: Create a tcp-ds paths
  file:
    path: "{{datagen_path}}"
    state: directory
    owner: "{{ lookup('env', 'USERNAME')}}"
    mode: 0755
  become: true

- name: Run tpc-ds data generation with scale {{datagen_scale}} with parallelism {{ansible_facts['processor_vcpus']}}
  command: "dsdgen_generate_data.sh {{datagen_scale}} 1 {{ansible_facts['processor_vcpus']}} {{item.1}}"
  with_indexed_items: "{{path_result.results | map(attribute='ansible_facts.path_item') | list}}" 
  async: 86400
  poll: 0
  register: _create_instances

- name: Generate tcp-ds query0.sql
  command: "{{ lookup('env','HOME') }}/workspace/TPC-DS/00_compile_tpcds/tools/dsqgen -input {{ lookup('env','HOME') }}/workspace/TPC-DS/00_compile_tpcds/query_templates/templates.lst -directory {{ lookup('env','HOME') }}/workspace/TPC-DS/00_compile_tpcds/query_templates -output {{ lookup('env','HOME') }}/workspace/TPC-DS/01_gen_data/ -dialect pivotal -scale {{datagen_scale}} -verbose y"
  args:
    chdir: "{{ lookup('env','HOME') }}/workspace/TPC-DS/00_compile_tpcds/tools/"

- name: Generate tcp-ds queries
  shell: |
	query_id=1
	for p in $(seq 1 99); do
			q=$(printf %02d $query_id)
			filename=$file_id.tpcds.$q.sql
			template_filename=query$p.tpl
			start_position=""
			end_position=""
			for pos in $(grep -n $template_filename $PWD/query_0.sql | awk -F ':' '{print $1}'); do
					if [ "$start_position" == "" ]; then
							start_position=$pos
					else
							end_position=$pos
					fi
			done

			echo "echo \":EXPLAIN_ANALYZE\" > $PWD/../05_sql/$filename"
			echo ":EXPLAIN_ANALYZE" > $PWD/../05_sql/$filename
			echo "sed -n \"$start_position\",\"$end_position\"p $PWD/query_0.sql >> $PWD/../05_sql/$filename"
			sed -n "$start_position","$end_position"p $PWD/query_0.sql >> $PWD/../05_sql/$filename
			query_id=$(($query_id + 1))
			file_id=$(($file_id + 1))
			echo "Completed: $PWD/../05_sql/$filename"
	done
  args:
    chdir: "{{ lookup('env','HOME') }}/workspace/TPC-DS/00_compile_tpcds/tools/"

  command: "{{ lookup('env','HOME') }}/workspace/TPC-DS/01_gen_data/generate_queries.sh {{datagen_scale}}"

- name: Wait for tpc-dh datagen to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
  register: _jobs
  until: _jobs.finished
  delay: 60
  retries: "{{datagen_scale * 10}}"
  with_items: "{{ _create_instances.results }}"

